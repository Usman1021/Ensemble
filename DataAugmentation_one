%% For data augmentation, change the value of alpha upto 0.5 for first set, 1.0 for second set and 1.5 for thrid set. 

% Get a list of video files in the current directory
videoFiles = dir('*.mov');

% Parameters
segmentSize = 40; % Number of frames in each segment

for k = 1:numel(videoFiles)
    videoFileName = videoFiles(k).name;
    
    % Create a video file reader
    videoFileReader = vision.VideoFileReader(videoFileName);
    
    % Count the total number of frames in the video
    numFrames = 0;
    while ~isDone(videoFileReader)
        step(videoFileReader);
        numFrames = numFrames + 1;
    end
    reset(videoFileReader); % Reset the video file reader
    
    % Initialize variables
    Hcumulative = eye(3);

    for startFrame = 1:segmentSize:numFrames
        endFrame = min(startFrame + segmentSize - 1, numFrames);

        % Initialize stabilizedFrame for this segment
        stabilizedFrame = zeros(size(step(videoFileReader)));

        for i = startFrame:endFrame
            currentFrame = step(videoFileReader);

            if i > startFrame
                % Estimate and apply transformation for stabilization
                H = cvexEstStabilizationTform(imgA, currentFrame);
                HsRt = cvexTformToSRT(H);
                Hcumulative = HsRt * Hcumulative;

                % Warp the frame using the accumulated transformation
                img = imwarp(currentFrame, rigid2d(Hcumulative), 'OutputView', imref2d(size(currentFrame)));
                stabilizedFrame = stabilizedFrame + img;
            end

            imgA = currentFrame; % Store previous frame
        end

        stabilizedFrame = stabilizedFrame / (endFrame - startFrame + 1);
        alpha = 1.0;
        blended = alpha * stabilizedFrame + (1 - alpha) * currentFrame;

        % Save the stabilized segment as an image
        [~, videoName, ~] = fileparts(videoFileName); % Extract video name
        segmentIndex = ceil(startFrame / segmentSize);
        outputFileName = strcat(videoName, '_segment', num2str(segmentIndex), '.jpg');
        imwrite(blended, outputFileName);
    end
end

%% Function to Estimate Stabilization Transformation
function H = cvexEstStabilizationTform(imgA, imgB)
ptThresh = 0.1;
imgA = im2gray(imgA);
imgB = im2gray(imgB);

pointsA = detectFASTFeatures(imgA, 'MinContrast', ptThresh);
pointsB = detectFASTFeatures(imgB, 'MinContrast', ptThresh);

[featuresA, pointsA] = extractFeatures(imgA, pointsA);
[featuresB, pointsB] = extractFeatures(imgB, pointsB);

indexPairs = matchFeatures(featuresA, featuresB);
pointsA = pointsA(indexPairs(:, 1), :);
pointsB = pointsB(indexPairs(:, 2), :);

[tform, ~, ~, status] = estimateGeometricTransform(pointsB, pointsA, 'rigid');
H = tform.T;
end

%% Function to Convert Transformation to S-R-t Format
function [H, s, ang, t, R] = cvexTformToSRT(H)
R = H(1:2, 1:2);
t = H(3, 1:2);
ang = mean([atan2(R(2), R(1)), atan2(-R(3), R(4))]);
s = mean(R([1 4]) / cos(ang));
R = [cos(ang), -sin(ang); sin(ang), cos(ang)];
H = [[s * R; t], [0 0 1]'];
end
